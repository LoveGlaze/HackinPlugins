# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none

schedules:
- cron: "0 */8 * * *" # DAMN BUG!!!!!!!!!!!!!!!!!!!!!!!!!
  displayName: Schedule Build
  branches:
    include:
    - master
  always: true

pool:
  vmImage: 'macOS-latest'

steps:
- task: Bash@3
  displayName: initCheck
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      # nasm
      pushd /tmp >/dev/null || exit 1
      rm -rf nasm-mac64.zip
      curl -OL "https://github.com/acidanthera/ocbuild/raw/master/external/nasm-mac64.zip" || exit 1
      nasmzip=$(cat nasm-mac64.zip)
      rm -rf nasm-*
      curl -OL "https://github.com/acidanthera/ocbuild/raw/master/external/${nasmzip}" || exit 1
      unzip -q "${nasmzip}" nasm*/nasm nasm*/ndisasm || exit 1
      sudo mkdir -p /usr/local/bin || exit 1
      sudo mv nasm*/nasm /usr/local/bin/ || exit 1
      sudo mv nasm*/ndisasm /usr/local/bin/ || exit 1
      rm -rf "${nasmzip}" nasm-*
      popd >/dev/null || exit 1

      # iasl
      pushd /tmp >/dev/null || exit 1
      rm -rf iasl-macosx.zip
      curl -OL "https://github.com/acidanthera/ocbuild/raw/master/external/iasl-macosx.zip" || exit 1
      iaslzip=$(cat iasl-macosx.zip)
      rm -rf iasl
      curl -OL "https://github.com/acidanthera/ocbuild/raw/master/external/${iaslzip}" || exit 1
      unzip -q "${iaslzip}" iasl || exit 1
      sudo mkdir -p /usr/local/bin || exit 1
      sudo mv iasl /usr/local/bin/ || exit 1
      rm -rf "${iaslzip}" iasl
      popd >/dev/null || exit 1

      # mtoc
      pushd /tmp >/dev/null || exit 1
      rm -f mtoc mtoc-mac64.zip
      curl -OL "https://github.com/acidanthera/ocbuild/raw/master/external/mtoc-mac64.zip" || exit 1
      mtoczip=$(cat mtoc-mac64.zip)
      rm -rf mtoc-*
      curl -OL "https://github.com/acidanthera/ocbuild/raw/master/external/${mtoczip}" || exit 1
      unzip -q "${mtoczip}" mtoc || exit 1
      sudo mkdir -p /usr/local/bin || exit 1
      sudo rm -f /usr/local/bin/mtoc /usr/local/bin/mtoc.NEW || exit 1
      sudo cp mtoc /usr/local/bin/mtoc || exit 1
      popd >/dev/null || exit 1
- task: Bash@3
  displayName: Build OpenCorePkg
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      BD="$(date +"%Y-%m-%d")" # Build Date
      echo "##vso[task.setvariable variable=BuildDate]$BD"
      cd ../b
      git clone --depth=30 https://github.com/acidanthera/OpenCorePkg.git
      cd OpenCorePkg
      ./build_oc.tool
      cp -f Binaries/* ../
      cd ../
      rm -rf OpenCorePkg
      git clone https://github.com/acidanthera/Lilu.git
      cd Lilu
      xcodebuild -configuration Debug -arch x86_64
      xcodebuild -configuration Release -arch x86_64
      unzip build/Debug/*.zip
      cp -Rf build/Debug/*.kext ../Lilu.kext
      cp -f build/Debug/*.zip ../
      cp -f build/Release/*.zip ../
      cd ../
      rm -rf Lilu

      hackinLiluPlugins=('AirportBrcmFixup,https://github.com/acidanthera/AirportBrcmFixup.git'
      'AppleALC,https://github.com/acidanthera/AppleALC.git'
      'AMFIExemption,https://github.com/osy86/AMFIExemption.git'
      'ATH9KFixup,https://github.com/chunnann/ATH9KFixup.git'
      'BT4LEContinuityFixup,https://github.com/acidanthera/BT4LEContinuityFixup.git'
      'CPUFriend,https://github.com/acidanthera/CPUFriend.git'
      'CpuTscSync,https://github.com/lvs1974/CpuTscSync.git'
      'DebugEnhancer,https://github.com/acidanthera/DebugEnhancer.git'
      'DiskArbitrationFixup,https://github.com/Goldfish64/DiskArbitrationFixup.git'
      'HibernationFixup,https://github.com/acidanthera/HibernationFixup.git'
      'Innie,https://github.com/cdf/Innie.git'
      'MacProMemoryNotificationDisabler,https://github.com/IOIIIO/MacProMemoryNotificationDisabler.git'
      'NightShiftEnabler,https://github.com/cdf/NightShiftEnabler.git'
      'NoTouchID,https://github.com/al3xtjames/NoTouchID.git'
      'NVMeFix,https://github.com/acidanthera/NVMeFix.git'
      'RTCMemoryFixup,https://github.com/acidanthera/RTCMemoryFixup.git'
      'SystemProfilerMemoryFixup,https://github.com/Goldfish64/SystemProfilerMemoryFixup.git'
      'ThunderboltReset,https://github.com/osy86/ThunderboltReset.git'
      'VirtualSMC,https://github.com/acidanthera/VirtualSMC.git'
      'WhateverGreen,https://github.com/acidanthera/WhateverGreen.git')

      hackinPlugins=('IntelMausi,https://github.com/acidanthera/IntelMausi.git'
      'AtherosE2200Ethernet,https://github.com/Mieze/AtherosE2200Ethernet.git'
      'RTL8111_driver_for_OS_X,https://github.com/Mieze/RTL8111_driver_for_OS_X.git')

      for plugin in ${hackinLiluPlugins[*]}; do
        git clone -q ${plugin##*,} ${plugin%,*} -b master --depth=1
        cd ${plugin%,*}
        cp -Rf ../Lilu.kext .
        xcodebuild -configuration Release -arch x86_64
        xcodebuild -configuration Debug -arch x86_64
        if [ -e build/Release/*.zip ]; then
          cp -f build/Release/*.zip ../
          cp -f build/Debug/*.zip ../
        else
          cp -Rf build/Release/*.kext ../
          cp -Rf build/Debug/*.kext ../
        fi
        cd ../
        rm -rf ${plugin%,*}
      done;

      for plugin in ${hackinPlugins[*]}; do
        git clone -q ${plugin##*,} ${plugin%,*} -b master --depth=1
        cd ${plugin%,*}
        xcodebuild -configuration Release -arch x86_64
        xcodebuild -configuration Debug -arch x86_64
        if [ -e build/Release/*.zip ]; then
          cp -f build/Release/*.zip ../
          cp -f build/Debug/*.zip ../
        else
          cp -Rf build/Release/*.kext ../
          cp -Rf build/Debug/*.kext ../
        fi
        cd ../
        rm -rf ${plugin%,*}
      done;

      rm -rf Lilu.kext
      name=HackinPlugins_`date +%Y%m%d`.zip
      zip -q -r $name *
      ls
      mkdir ../a/Artifacts
      cp -f $name ../a/Artifacts
      ls $(Build.ArtifactStagingDirectory)/Artifacts

- task: CopyFilesOverSSH@0
  inputs:
    sshEndpoint: 'vps'
    sourceFolder: '$(Build.ArtifactStagingDirectory)/Artifacts'
    contents: '**'
    targetFolder: '/var/www/downloads/HackinPlugins'
    readyTimeout: '20000'

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github'
    repositoryName: '$(Build.Repository.Name)'
    action: 'edit'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: '$(BuildDate)'
    title: '$(BuildDate)'
    releaseNotesSource: 'inline'
    releaseNotesInline: 'Hackintosh全家桶每日编译更新'
    assets: '$(Build.ArtifactStagingDirectory)/Artifacts/*.zip'
    isPreRelease: false
    addChangeLog: false



